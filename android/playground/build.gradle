apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def codePushPropertiesFile = new File("${rootDir}/playground/codepush.properties")
def codePushProperties = null
if (codePushPropertiesFile.exists()) {
    codePushProperties = new Properties()
    codePushProperties.load(new FileInputStream(codePushPropertiesFile))
}

def stageCodePushKey = codePushProperties != null ? codePushProperties["STAGING_KEY"] : ""
def productionCodePushKey = codePushProperties != null ? codePushProperties["PRODUCTION_KEY"] : ""

android {
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.kiwi.mobile.rnandroidplayground"
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    signingConfigs {
        stagingRelease {
            // Just a fake keystore / fake password
            storeFile file("playground-key-staging.keystore")
            storePassword 'kiwireactnative'
            keyAlias 'my-key-alias'
            keyPassword 'kiwireactnative'
        }
        release {
            // Just a fake keystore / fake password
            storeFile file("playground-key.keystore")
            storePassword 'kiwireactnative'
            keyAlias 'my-key-alias'
            keyPassword 'kiwireactnative'
        }
    }
    buildTypes {
        debug {
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager.
            // However, because CodePush checks for updates in all modes, we must supply a key.
            buildConfigField "String", "CODEPUSH_KEY", '""'
            buildConfigField "String", "CODEPUSH_VERSION", '""'
        }
        stagingRelease {
            buildConfigField "String", "CODEPUSH_KEY", "\"${stageCodePushKey}\""
            buildConfigField "String", "CODEPUSH_VERSION", "\"${codePushVersion}\""
            signingConfig signingConfigs.stagingRelease
            matchingFallbacks = ['release']
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", "\"${productionCodePushKey}\""
            buildConfigField "String", "CODEPUSH_VERSION", "\"${codePushVersion}\""
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }
    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "com.android.support:multidex:$multidexVersion"
    implementation "androidx.appcompat:appcompat:$supportVersion"

    /**
     * In debug mode, it will use the local rnkiwimobile project.
     * If we don't have anything in .build/android, then it will also use the packager
     *
     * In release mode, it will use the rnkiwimobile from Trinerdis (without packager running)
     */
    debugImplementation(project(':rnkiwimobile')) {
        exclude group: "com.google.android.gms"
        exclude group: "com.google.firebase"
    }

    // You can choose staging to use the Staging CodePush key
    stagingReleaseImplementation(project(':rnkiwimobile')) {
        exclude group: "com.android.support"
        exclude group: "com.google.android.gms"
        exclude group: "com.google.firebase"
    }

    releaseImplementation("com.trinerdis.skypicker:rnkiwimobile:$rnKiwiMobileVersion-SNAPSHOT") {
        exclude group: "com.android.support"
        exclude group: "com.google.android.gms"
        exclude group: "com.google.firebase"
    }

    implementation "com.google.android.gms:play-services-maps:$playServicesMapsVersion"

    implementation "com.trinerdis.skypicker:logging:$loggingVersion-SNAPSHOT"

    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "com.android.support.test:runner:$testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
}
