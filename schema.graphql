# @generated SignedSource<<24af02208aafac8c7267eb81aab2d104>>

schema {
  query: RootQuery
  mutation: RootMutation
}

type AdditionalBaggage {
  price: Price

  """Number of baggage."""
  quantity: Int
}

type Address {
  city: String

  """Contains street and number."""
  street: String
  zip: String
}

type Airline {
  """2-letter IATA code of airline."""
  code: String

  """Airline is low cost carrier."""
  isLowCost: Boolean @deprecated(reason: "This field has been deprecated by BE and doesn't have any replacement.")
  logoUrl: String
  name: String
}

type AirportArrivalTimelineEvent implements TimelineEvent {
  """Location of departure"""
  location: RouteStop

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""
Information about hotel availability during selected time period from Stay22 api.
"""
type AllAvailableStay22Hotel implements AllHotelsInterface {
  address: Address

  """Location of the hotel."""
  coordinates: Coordinates

  """Hotel distance from the center in Km."""
  distanceFromCenter: Float

  """Stay 22 id"""
  hotelId: ID

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  money: Money

  """Name of the hotel."""
  name: String

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use money type instead")
  rating: HotelRating
  review: HotelReview
}

"""A connection to a list of items."""
type AllAvailableStay22HotelConnection {
  """Name of the closest city"""
  cityName: String

  """A list of edges."""
  edges: [AllAvailableStay22HotelEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Meta data for the search"""
  stats: HotelSearchMeta
}

"""An edge in a connection."""
type AllAvailableStay22HotelEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AllAvailableStay22Hotel
}

type AllCustomerSupportNumbers {
  """Premium customer support phone numbers"""
  premiumCustomerSupportNumbers: [CustomerSupportNumber]

  """Standard customer support phone numbers"""
  standardCustomerSupportNumbers: [CustomerSupportNumber]
}

"""Information about hotel availability during selected time period."""
type AllHotelAvailabilityHotel implements AllHotelsInterface {
  address: Address

  """Location of the hotel."""
  coordinates: Coordinates

  """Hotel distance from the center in Km."""
  distanceFromCenter: Float

  """ID of hotel"""
  hotelId: ID

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  money: Money

  """Name of the hotel."""
  name: String

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use money type instead")
  rating: HotelRating
  review: HotelReview
}

"""A connection to a list of items."""
type AllHotelAvailabilityHotelConnection {
  """Name of the closest city"""
  cityName: String

  """A list of edges."""
  edges: [AllHotelAvailabilityHotelEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  stats: HotelAvailabilityStats
}

"""An edge in a connection."""
type AllHotelAvailabilityHotelEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AllHotelAvailabilityHotel
}

interface AllHotelsInterface {
  address: Address
  coordinates: Coordinates
  distanceFromCenter: Float
  hotelId: ID

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  mainPhoto: HotelPhoto
  money: Money
  name: String
  price: Price
  rating: HotelRating
  review: HotelReview
}

type AllowedBaggage {
  """Extra and overweight baggage."""
  additionalBaggage: [AdditionalBaggage]

  """Small carry-on luggage."""
  cabin: [Baggage]

  """Baggage checked online."""
  checked: [Baggage]
}

"""List of ancillaries that are ordered with booking"""
type Ancillaries {
  airhelpPlus: [AncillaryPerBooking]
  blueribbonBags: [AncillaryPerSegmentPerPassenger]
  fastTrack: [AncillaryPerSegmentPerPassenger]
}

input Ancillaries3rdCarrier {
  operational: Ancillaries3rdOperational
}

input Ancillaries3rdItinerary {
  """
  Arrival time of the segment, its in timestamp format "1550042100"
  """
  arrival: Int

  """Carrier of a particular segment"""
  carrier: Ancillaries3rdCarrier
  carrier_segment_code: String

  """
  Departure time of the segment, its in timestamp format "1550042100"
  """
  departure: Int

  """Destination of a segment ex. "TXL", "MAD" etc."""
  destinationCode: String

  """Segment code"""
  segment_code: String

  """
  Source of a segment "TXL", "MAD"
  """
  sourceCode: String
  vehicle: Ancillaries3rdVehicle
}

"""Ancillaries3rd offers for the booking"""
type Ancillaries3rdOffers {
  data: Ancillaries3rdOffersData
  name: String
  service: String
  type: Int
}

"""A connection to a list of items."""
type Ancillaries3rdOffersConnection {
  """A list of edges."""
  edges: [Ancillaries3rdOffersEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type Ancillaries3rdOffersData {
  is_applicable: Boolean
  price_info: Ancillaries3rdOffersPriceInfo
}

"""An edge in a connection."""
type Ancillaries3rdOffersEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Ancillaries3rdOffers
}

type Ancillaries3rdOffersPriceInfo {
  base_price: Float
  currency: String
  service_fee: Float
}

input Ancillaries3rdOperational {
  """Carrier segment code"""
  code: String
}

input Ancillaries3rdServices {
  """Name of the requested ancillary"""
  service: AvailableServicesEnums
}

input Ancillaries3rdVehicle {
  """Segment vehicle type"""
  type: String
}

"""Ancillary document with url to document"""
type AncillaryDocument {
  url: String
}

enum AncillaryOrderStateEnum {
  DONE
  PROCESSING
}

type AncillaryPerBooking {
  extra_id: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  orderState: AncillaryOrderStateEnum
  price: AncillaryPrice
  thirdPartyAncillaryOrderId: Int
}

type AncillaryPerSegmentPerPassenger {
  attachments: [AncillaryDocument]
  extraId: Int
  id: Int
  items: [PassengerSegment]
  orderState: AncillaryOrderStateEnum
  thirdPartyAncillaryOrderId: Int
}

type AncillaryPrice {
  amount: String
  base: String
  currency: String
  merchant: String
  service: String
  service_flat: String
}

input AreaInput {
  """Bottom right coordinates of the area."""
  bottomRight: CoordinatesInput!

  """Top left coordinates of the area."""
  topLeft: CoordinatesInput!
}

type ArrivalTimelineEvent implements TimelineEvent {
  """Location of arrival"""
  location: RouteStop

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

enum AttachmentsFor {
  FAST_TRACK
}

enum availabilityStatus {
  AT_AIRPORT
  AVAILABLE
  IN_FUTURE
  OTHER
}

input AvailableHotelOptionsInput {
  """Three-letters ISO 4217 currency code, e.g. EUR or USD"""
  currency: Currency

  """Order results by this input type"""
  orderBy: OrderBy
}

input AvailableHotelSearchInput {
  checkin: Date!
  checkout: Date!

  """Opaque hotel ID."""
  hotelId: ID!
  language: Language
  roomsConfiguration: [RoomsConfiguration!]!
}

enum AvailableServicesEnums {
  airhelp_plus
  axa
  blueribbon_bags
  cover_more
  fast_track
  paid_checkin
}

type Baggage {
  category: BaggageCategory
  height: Int
  length: Int
  note: String
  weight: Int
  width: Int
}

enum BaggageCategory {
  CABIN_BAG
  CHECKED
  PERSONAL_ITEM
}

type BoardingPass {
  """Boarding pass availability status"""
  availabilityStatus: availabilityStatus

  """The date when the boarding pass will be available for download"""
  availableAt: Date
  boardingPassUrl: String
  flightNumber: String

  """The leg for the boarding pass"""
  leg: Leg

  """pkpasses connected to the boarding pass"""
  pkpasses: [Pkpass]
}

type BoardingTimelineEvent implements TimelineEvent {
  """Terminal at which boarding is done"""
  terminal: String

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type BookedFlightTimelineEvent implements TimelineEvent {
  """Location of arrival"""
  location: RouteStop

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type BookedService {
  """Type of booked service"""
  category: BookedServiceCategory

  """Status of booked service"""
  status: BookedServiceStatus
}

enum BookedServiceCategory {
  ALLOCATED_SEATING
  BAGS
  EXTRAS_BAGS
  EXTRAS_CHANGE_FLIGHT
  EXTRAS_OTHER
  EXTRAS_PASSENGER_DETAILS_CHANGE
  FLIGHTS
  MEALS_ON_BOARD
  MUSICAL_EQUIPMENT
  PRICE_CHANGE
  SPECIAL_ASSISTANCE
  SPORTS_EQUIPMENT
  TRAVELLING_WITH_PETS
  UPDATE_INSURANCES
}

enum BookedServiceStatus {
  CLOSED
  CONFIRMED
  OPEN
  PENDING
}

"""
DEPRECATED! Use "customerBookings" query instead. That query will return
interface instead so you don't have to work with this generic type.
"""
type Booking {
  allowedBaggage: AllowedBaggage
  arrival: RouteStop @deprecated(reason: "Use \"oneWay\", \"return\" & \"multicity\"  fields to retrieve booking info.")

  """Static assets related to this booking."""
  assets: BookingAssets
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices
  baggage: [BookingBaggage]
  bookedServices: [BookedService]

  """Date of the booking creation"""
  bookingDate: Date

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  contactDetails: BookingContactDetails

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  departure: RouteStop @deprecated(reason: "Use \"oneWay\", \"return\" & \"multicity\"  fields to retrieve booking info.")
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  insurancePrices: [InsurancePrice]
  isPastBooking: Boolean

  """Flight segments, e.g. stopover, change of aircraft, etc."""
  legs: [Leg] @deprecated(reason: "Use \"oneWay\", \"return\" & \"multicity\"  fields to retrieve booking info.")
  multicity: BookingMulticity
  oneWay: BookingOneWay
  onlineCheckinIsAvailable: Boolean
  passengerCount: Int
  passengers: [Passenger]

  """Total price of the whole booking."""
  price: Price
  return: BookingReturn

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String
  status: BookingStatus
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg
}

type BookingAssets {
  """Boarding passes for flights in this booking"""
  boardingPasses: [BoardingPass]

  """URL of the invoice."""
  invoiceUrl: String

  """
  URL of the electronic ticket. Ticket may not be available yet (returns null).
  """
  ticketUrl: String
}

"""
Query parameters to fetch single booking for authenticated user. Send
"Authorization" or "KW-Auth-Token" HTTP header when querying for booking with
these arguments.
"""
input BookingAuthInput {
  """Booking ID"""
  bid: Int!
}

type BookingBaggage {
  bag: Baggage
  passengers: [Passenger]
  quantity: Int
}

type BookingConfirmedTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Contact details related to the booking"""
type BookingContactDetails {
  email: String

  """Documentation and information about the passanger."""
  passenger: Passenger
  phone: String
}

type BookingCustomerSupport {
  CSPhoneNumbers: CSPhoneNumbersResponse

  """
  Is Guarantee Chat allowed to provide direct contact to customer service.
  """
  hasGuaranteeChat: Boolean

  """
  Localised phone number of customer service. Null if not available for that locale.
  """
  phoneNumber: String @deprecated(reason: "Use \"CSPhoneNumbers\" field instead.")
}

enum BookingDestinationImageDimensions {
  _1200x628
  _1280x720
  _220x165
  _275x250
  _300x165
  _375x165
  _600x330
  _600x600
  _610x251
}

type BookingIdentity {
  affiliateId: String

  """Current balance of Kiwi.com credits by currency."""
  balances: [Money]

  """Discounts for booking payments in % from base price."""
  discounts: BookingIdentityDiscounts
  searchApiToken: String
}

type BookingIdentityDiscounts {
  """Discount in % from base price when using card."""
  card: Int

  """Discount in % from base price when using Kiwi.com credits."""
  credits: Int
}

interface BookingInterface {
  allowedBaggage: AllowedBaggage

  """Static assets related to this booking."""
  assets: BookingAssets
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices
  baggage: [BookingBaggage]
  bookedServices: [BookedService]

  """Date of the booking creation"""
  bookingDate: Date

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  contactDetails: BookingContactDetails

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  insurancePrices: [InsurancePrice]
  isPastBooking: Boolean
  onlineCheckinIsAvailable: Boolean
  passengerCount: Int
  passengers: [Passenger]

  """Total price of the whole booking."""
  price: Price

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String
  status: BookingStatus
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg
}

"""A connection to a list of items."""
type BookingInterfaceConnection {
  """A list of edges."""
  edges: [BookingInterfaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type BookingInterfaceEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: BookingInterface
}

type BookingMulticity implements BookingInterface & Node {
  allowedBaggage: AllowedBaggage

  """Static assets related to this booking."""
  assets: BookingAssets
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices
  baggage: [BookingBaggage]
  bookedServices: [BookedService]

  """Date of the booking creation"""
  bookingDate: Date

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  contactDetails: BookingContactDetails

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String

  """Final destination."""
  end: RouteStop

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  insurancePrices: [InsurancePrice]
  isPastBooking: Boolean
  onlineCheckinIsAvailable: Boolean
  passengerCount: Int
  passengers: [Passenger]

  """Total price of the whole booking."""
  price: Price

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Initial origin."""
  start: RouteStop
  status: BookingStatus

  """List of trips in each multicity segment."""
  trips: [Trip]
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg
}

"""
Booking with simple trip from origin to destination, with possible stopovers.
"""
type BookingOneWay implements BookingInterface & Node {
  allowedBaggage: AllowedBaggage

  """Static assets related to this booking."""
  assets: BookingAssets
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices
  baggage: [BookingBaggage]
  bookedServices: [BookedService]

  """Date of the booking creation"""
  bookingDate: Date

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  contactDetails: BookingContactDetails

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  insurancePrices: [InsurancePrice]
  isPastBooking: Boolean
  onlineCheckinIsAvailable: Boolean
  passengerCount: Int
  passengers: [Passenger]

  """Total price of the whole booking."""
  price: Price

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String
  status: BookingStatus
  trip: Trip
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg
}

"""Booking with return trip. A <-> B"""
type BookingReturn implements BookingInterface & Node {
  allowedBaggage: AllowedBaggage

  """Static assets related to this booking."""
  assets: BookingAssets
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices
  baggage: [BookingBaggage]
  bookedServices: [BookedService]

  """Date of the booking creation"""
  bookingDate: Date

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  contactDetails: BookingContactDetails

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Return trip back from destination to origin."""
  inbound: Trip
  insurancePrices: [InsurancePrice]
  isPastBooking: Boolean
  onlineCheckinIsAvailable: Boolean

  """Trip from origin to destination."""
  outbound: Trip
  passengerCount: Int
  passengers: [Passenger]

  """Total price of the whole booking."""
  price: Price

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String
  status: BookingStatus
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg
}

"""Query parameters to fetch single booking without user authentication."""
input BookingSimpleTokenInput {
  """Booking ID"""
  bid: Int!
  brand: String!

  """Simple token enabling to access single booking without Authentication."""
  simpleToken: String!
}

enum BookingStatus {
  CANCELLED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  CLOSED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  CONFIRMED
  DELETED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  EXPIRED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  IN_PROCESS
  NEW @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  PENDING @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  REFUNDED
}

type BookingTimeline {
  """List of events of the Bookingtimeline"""
  events: [TimelineEvent]
}

enum BookingType {
  MULTICITY
  ONE_WAY
  RETURN
}

"""String code of Kiwi.com partner or "kiwicom"."""
scalar Brand

type CarRentalService {
  relevantCities: [CarRentalServiceRelevantCities]
}

type CarRentalServiceRelevantCities {
  location: Location
  whitelabelURL: String
}

type Carrier {
  """Unique code of the carrier, IATA code for airlines."""
  code: String

  """The ID of an object"""
  id: ID!

  """Indicates whether it is low cost carrier."""
  isLowCost: Boolean @deprecated(reason: "This field has been deprecated by BE and doesn't have any replacement.")
  name: String
}

type CheckEmailResponse {
  result: CheckEmailResult
}

type CheckEmailResult {
  hasBooking: Boolean
  hasFacebook: Boolean
  hasGoogle: Boolean
  hasKiwiAccount: Boolean
}

type CheckIn {
  """Check-in status and dates per each segment of the booking"""
  segments: [CheckInInfo]
}

type CheckinClosingTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""
Object that gives you information about the check-in, such as the status and the date it opens or closes
"""
type CheckInInfo {
  """Date that marks the deadline of check-in in at the airport"""
  airportDeadlineAt: Date

  """Date that the check-in is closed and cannot be performed anymore"""
  closeAt: Date

  """Date that the check-in is available from"""
  openAt: Date

  """ID of the segment the check-in belongs to"""
  segmentCode: String

  """Status of the check-in"""
  status: CheckInStatuses
}

"""The possible Check-In statuses"""
enum CheckInStatuses {
  CANCELED
  DONE
  FAILED
  MISSED
  OTHER
  PROCESSING
  PROVIDE_DETAILS
  RESTRICTED
  SOME_CHECKINS_DONE_SOME_MISSED
  SOME_CHECKINS_DONE_SOME_PROCESSING
  SOME_CHECKINS_DONE_SOME_WAITING_FOR_DETAILS
  SOME_CHECKINS_MISSED_SOME_FAILED
  SOME_CHECKINS_PROCESSING_SOME_MISSED
  UNAVAILABLE
  WAITING_FOR_CHECKIN
  WAITING_FOR_DETAILS
}

type ChildrenType {
  age: Int
}

type Coordinates {
  """Latitude."""
  lat: Float

  """Longitude."""
  lng: Float
}

input CoordinatesInput {
  """Latitude."""
  lat: Float!

  """Longitude."""
  lng: Float!
}

enum CoveredBy {
  CARRIER
  KIWICOM
}

enum CreateAccountError {
  ACCOUNT_EXISTS
  INVALID_EMAIL
  WEAK_PASSWORD
}

input CreateAccountInput {
  email: String!
  firstName: String = ""
  lastName: String = ""

  """Username for login. Email is used if not provided."""
  login: String
  password: String!
}

type CreateAccountResponse {
  error: CreateAccountError
  identity: Identity
  success: Boolean
}

input CreateSimpleTokenInput {
  bookingId: Int!
  email: String!
  origin: DateAndIataCodeInput!
}

union CreateSimpleTokenResponse = SimpleToken | SimpleTokenError

type CreateStoredOperation {
  createdOperations: [StoredOperation]
}

type CSPhoneAvailabilityAllWeek implements CSPhoneAvailabilityInterface {
  """Customer support availability type"""
  type: CSPhoneAvailabilityType @deprecated(reason: "Use \"__typename\" field instead.")
  weekend: OpeningHours
  workingDays: OpeningHours
}

type CSPhoneAvailabilityCustom implements CSPhoneAvailabilityInterface {
  """Customer support availability type"""
  type: CSPhoneAvailabilityType @deprecated(reason: "Use \"__typename\" field instead.")
}

interface CSPhoneAvailabilityInterface {
  """Customer support availability type"""
  type: CSPhoneAvailabilityType @deprecated(reason: "Use \"__typename\" field instead.")
}

type CSPhoneAvailabilityNonstop implements CSPhoneAvailabilityInterface {
  """Customer support availability type"""
  type: CSPhoneAvailabilityType @deprecated(reason: "Use \"__typename\" field instead.")
}

"""Possible customer support availabilites types"""
enum CSPhoneAvailabilityType {
  ALL_WEEK
  CUSTOM
  NONSTOP
  WORKING_DAYS
}

type CSPhoneAvailabilityWorkingDays implements CSPhoneAvailabilityInterface {
  """Opening hour"""
  from: String @deprecated(reason: "Use \"workingDays\" field instead.")

  """Closing hour"""
  to: String @deprecated(reason: "Use \"workingDays\" field instead.")

  """Customer support availability type"""
  type: CSPhoneAvailabilityType @deprecated(reason: "Use \"__typename\" field instead.")
  workingDays: OpeningHours
}

type CSPhoneNumbers {
  phoneNumbers(after: String, before: String, first: Int, last: Int): CustomerSupportNumberConnection
}

type CSPhoneNumbersError {
  code: CSPhonesErrorCode
}

union CSPhoneNumbersResponse = CSPhoneNumbers | CSPhoneNumbersError

"""Possible types of error that may occur while getting CS phone numbers."""
enum CSPhonesErrorCode {
  NOT_FOUND
  NOT_SUPPORTED_LOCALE
  UNKNOWN
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

type CurrencyDetail implements Node {
  """The code of the currency as used on Kiwi.com frontend"""
  code: String

  """List of affiliate IDs to enable the currency on"""
  enabledOnAffilId: [String]

  """The code of the currency used as a fallback"""
  fallback: String

  """Format string of the currency"""
  format: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """The name of the currency"""
  name: String

  """Currency rate compared to Euro"""
  rate: Float

  """Number of digits to round the currency to when doing conversion"""
  round: Int

  """Whether the format of the currency is universally accepted"""
  uncertainFormat: Boolean
}

"""A connection to a list of items."""
type CurrencyDetailConnection {
  """A list of edges."""
  edges: [CurrencyDetailEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CurrencyDetailEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: CurrencyDetail
}

enum CustomerBookingsOnlyEnum {
  FUTURE
  PAST
}

enum CustomerBookingsOrderEnum {
  ASC
  DESC
}

type CustomerSupportNumber {
  """Country name from where the customer support information belongs"""
  countryName: String

  """Additional information about the customer support phone number"""
  labels: [String]

  """Customer Support phone number locale territory"""
  localeTerritory: String

  """Customer Support phone number"""
  number: String

  """Languages supported by customer service and availability hours"""
  supportedLanguages: [SupportedLanguage]
}

"""A connection to a list of items."""
type CustomerSupportNumberConnection {
  """A list of edges."""
  edges: [CustomerSupportNumberEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CustomerSupportNumberEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: CustomerSupportNumber
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Information about departure required to identify single booking."""
input DateAndIataCodeInput {
  """ISO date of the departure as YYYY-MM-DD"""
  date: Date!

  """3-letter IATA code of station."""
  iataCode: String!
}

"""You always have to setup exact date OR range from-to."""
input DateInput {
  """Exact date (cannot be used in combination with from-to fields)."""
  exact: Date

  """
  Start of the date range (cannot be used in combination with exact date).
  """
  from: Date

  """End of the date range (cannot be used in combination with exact date)."""
  to: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DepartureTimelineEvent implements TimelineEvent {
  """Airline for the flight"""
  airline: Airline

  """Flight duration in minutes."""
  duration: Int

  """Flight number"""
  flightNumber: Int

  """Location of arrival"""
  location: RouteStop

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

enum DirectAccessURLValues {
  ASSISTANCE
  BAGS
  CANCEL
  CAR_RENTS
  CHANGE_TRIP
  EDIT_PASSENGERS
  HOTELS
  INSURANCE
  MUSICAL_EQUIPMENT
  PAYMENT
  PENDING_SERVICES
  PETS
  REFUND
  SEATING
  SPORT_EQUIPMENT
  TRAVEL_DOCUMENTS
  VALIDATE_PAYMENT
}

interface DocumentInterface {
  """URL of the document"""
  url: String
}

"""A connection to a list of items."""
type DocumentInterfaceConnection {
  """A list of edges."""
  edges: [DocumentInterfaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DocumentInterfaceEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: DocumentInterface
}

type DownloadBoardingPassTimelineEvent implements TimelineEvent {
  """Leg corresponding to the boarding pass"""
  leg: Leg

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type DownloadETicketTimelineEvent implements TimelineEvent {
  """URL of the eTicket"""
  ticketUrl: String

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type DownloadInvoiceTimelineEvent implements TimelineEvent {
  """URL of the invoice"""
  invoiceUrl: String

  """Legs of the booking"""
  legs: [Leg]

  """Number of passengers"""
  numberPassengers: Int

  """Time of appearance in the timeline."""
  timestamp: DateTime
}

input DurationInput {
  maxFlightDuration: Int
  stopovers: StopoversInput
}

"""Combination of flight and hotel"""
type DynamicPackage {
  """Transport part of the package"""
  flight: Flight

  """Accommodation part of the package"""
  hotel: Hotel

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Total price"""
  price: Price

  """URL to the whitelabel page where this dynamic package can be purchased"""
  whitelabelUrl: String
}

"""A connection to a list of items."""
type DynamicPackageConnection {
  """A list of edges."""
  edges: [DynamicPackageEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Service that was used for fetching dynamic packages."""
  provider: Provider
}

"""An edge in a connection."""
type DynamicPackageEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: DynamicPackage
}

input DynamicPackagesSimpleSearchInput {
  """Departure date"""
  date: Date!

  """Valid airport code according the IATA standard"""
  fromAirport: String!

  """List of inbound flight numbers (e.g. OK123)"""
  inboundFlights: [String!]!

  """List of outbound flight numbers (e.g. OK123)"""
  outboundFlights: [String!]!
  passengers: PassengersInput!

  """Return date"""
  returnDate: Date!

  """Valid airport code according the IATA standard"""
  toAirport: String!
}

type EnterDetailsTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""How extra charges are calculated"""
enum ExtraChargeMode {
  PER_NIGHT
  PER_PERSON_PER_NIGHT
  PER_PERSON_PER_STAY
  PER_STAY
  PERCENTAGE
  VARIABLE
}

"""Breakdown of extra charges"""
type ExtraCharges {
  """
  The amount of the charge, it could be 0, and would then need to be calculated
  """
  amount: String

  """Amount used to calculate charge, depending on chargePriceMode"""
  chargeAmount: String
  chargePriceMode: ExtraChargeMode
  currency: String
  excluded: Boolean
  name: String
  price: Price @deprecated(reason: "Use chargeAmount and chargePriceMode to calculate price instead, note that this value most likely will be wrong")
  type: String
}

type FAQArticle implements FAQItemInterface {
  """Content of the article"""
  content: String

  """Downvotes about the utility of the article"""
  downvotes: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Original numeric id of the article"""
  originalId: Int @deprecated(reason: "Use field \"id\" instead with the opaque: false parameter")

  """Perex of the FAQ article or category."""
  perex: String

  """Slug for friendly urls"""
  slug: String

  """Title of the FAQ article or category."""
  title: String

  """Upvotes about the utility of the article"""
  upvotes: Int
}

"""A connection to a list of items."""
type FAQArticleConnection {
  """A list of edges."""
  edges: [FAQArticleEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type FAQArticleEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: FAQArticle
}

union FAQArticleResponse = FAQArticle | FAQError

type FAQCategory implements FAQItemInterface {
  """List of ancestor categories in the tree from the root."""
  ancestors: [FAQCategory]

  """List of FAQ categories & articles ordered by relevancy."""
  children(after: String, before: String, first: Int, last: Int): FAQItemInterfaceConnection

  """List of FAQ articles"""
  FAQs: [FAQArticle] @deprecated(reason: "Use \"children\" field instead.")

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Original numeric id of the FAQ category"""
  originalId: Int @deprecated(reason: "Use field \"id\" instead with the opaque: false parameter")

  """Perex of the FAQ article or category."""
  perex: String

  """Slug for friendly urls"""
  slug: String

  """List of subcategories"""
  subcategories: [FAQCategory] @deprecated(reason: "Use \"children\" field instead.")

  """Title of the FAQ article or category."""
  title: String
}

union FAQCategoryResponse = FAQCategory | FAQError

enum FAQCommentType {
  CONFUSING
  DOESNT_ANSWER
  DONT_LIKE
  NOT_ACCURATE
  OTHER
}

type FAQError {
  """Code indicating the error type."""
  code: FAQErrorCode

  """Message with a further explanation of the error."""
  message: String
}

"""Possible FAQ queries Error codes"""
enum FAQErrorCode {
  """Booking was not found with given args."""
  BOOKING_NOT_FOUND

  """No FAQ article or category was found with given args."""
  NO_FAQ_ITEM

  """User is not authorized."""
  NOT_AUTHORIZED

  """Unknown error."""
  UNKNOWN
}

type FAQFeedbackResponse {
  article: FAQArticle

  """true if posting the response failed due to rate limit exhaustion"""
  isRateLimitExhausted: Boolean
}

"""
Lookup FAQ article or category by its unique id, originalId or slug. At least one field has to be specified.
"""
input FAQInputQuery {
  id: ID

  """
  Original numerical database id unique only for given type, not globally as ID.
  """
  originalId: Int

  """Human-readable keyword representing FAQ item in URL"""
  slug: String
}

interface FAQItemInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Perex of the FAQ article or category."""
  perex: String

  """Title of the FAQ article or category."""
  title: String
}

"""A connection to a list of items."""
type FAQItemInterfaceConnection {
  """A list of edges."""
  edges: [FAQItemInterfaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type FAQItemInterfaceEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: FAQItemInterface
}

enum FAQSection {
  BEFORE_BOOKING
  PAST_BOOKING
  UPCOMING_BOOKING
  URGENT_BOOKING
}

type Flight {
  """List of all Airlines involved."""
  airlines: [Airline]
  arrival: RouteStop

  """URL to the Kiwi.com for booking the flight."""
  bookingUrl: String
  departure: RouteStop

  """Flight duration in minutes."""
  duration: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Flight segments, e.g. stopover, change of aircraft, etc."""
  legs: [Leg]

  """Total flight price."""
  price: Price
}

"""A connection to a list of items."""
type FlightConnection {
  """A list of edges."""
  edges: [FlightEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type FlightEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Flight
}

input FlightsFiltersInput {
  duration: DurationInput
  maxStopovers: Int
}

input FlightsOptionsInput {
  """An ISO-4217 currency code."""
  currency: Currency
  locale: Locale
}

input FlightsSearchInput {
  """When do you want to leave?"""
  date: DateInput!

  """From where you want to fly?"""
  from: [LocationRadiusInput!]!
  passengers: PassengersInput

  """When do you want to return?"""
  returnDate: DateInput

  """To where you want to fly?"""
  to: [LocationRadiusInput!]!
}

type GeoIP {
  """Coordinates"""
  coordinates: Coordinates

  """ISO country code"""
  isoCountryCode: String
}

input HolidaysLocationInput {
  """Legacy ID used in Holidays Locations REST API"""
  locationId: String
}

"""General information about the hotel."""
type Hotel implements HotelInterface {
  address: Address

  """All amenities available in the hotel"""
  amenities: [HotelAmenity]
  cityName: String

  """Location of the hotel."""
  coordinates: Coordinates

  """Hotel distance from the center in Km."""
  distanceFromCenter: Float

  """All facilities available in the hotel."""
  facilities(after: String, before: String, first: Int, last: Int): HotelFacilityConnection @deprecated(reason: "Use amenities instead")

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """Name of the hotel."""
  name: String

  """
  Original (low level ID of the hotel). You are probably looking for "id" field.
  """
  originalId: String @deprecated(reason: "Use field \"id\" instead. This field is used only because of compatibility reasons with old APIs.")

  """All available photos of the hotel."""
  photos(after: String, before: String, first: Int, last: Int): HotelPhotoConnection

  """The star rating of the hotel."""
  rating: HotelRating
  review: HotelReview

  """All rooms available in the hotel."""
  rooms(after: String, before: String, first: Int, last: Int): HotelRoomConnection

  """Main description (summary) of the hotel."""
  summary: String

  """URL to our whitelabel page of this hotel."""
  whitelabelUrl: String
}

input HotelAmenitiesInput {
  """Show only hotels having airport shuttle as a service."""
  airportShuttle: Boolean

  """Show only hotels having facilities for disabled."""
  facilitiesForDisabled: Boolean

  """Show only hotels having family rooms."""
  familyRooms: Boolean

  """Show only hotels having fitness room."""
  fitnessCenter: Boolean

  """Show only hotels having free parking."""
  freeParking: Boolean

  """Show only hotels having indoor swimming pool."""
  indoorPool: Boolean

  """Show only hotels having any parking."""
  parking: Boolean

  """Show only hotels having pets allowed."""
  petsAllowed: Boolean

  """Show only hotels having spa."""
  spa: Boolean

  """Show only hotels having valet parking."""
  valetParking: Boolean

  """Show only hotels having wifi."""
  wifi: Boolean
}

type HotelAmenity {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the amenity."""
  name: String
}

"""Information about hotel availability during selected time period."""
type HotelAvailability implements HotelAvailabilityInterface {
  availableRooms: [HotelRoomAvailability]
  hotel: Hotel

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use total field instead")

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  total: Money
}

"""A connection to a list of items."""
type HotelAvailabilityConnection {
  """Name of the closest city"""
  cityName: String

  """A list of edges."""
  edges: [HotelAvailabilityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  stats: HotelAvailabilityStats
}

"""An edge in a connection."""
type HotelAvailabilityEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HotelAvailability
}

interface HotelAvailabilityInterface {
  availableRooms: [HotelRoomAvailabilityInterface]
  hotel: HotelInterface
  id: ID
  price: Price
  total: Money
}

"""
Overall statistics related to all hotels matching search & filter criteria
"""
type HotelAvailabilityStats {
  maxPrice: Float
  minPrice: Float
  priceMax: Float @deprecated(reason: "Use \"maxPrice\" field instead.")
  priceMin: Float @deprecated(reason: "Use \"minPrice\" field instead.")
}

type HotelCity {
  """Two letter country code of the city."""
  countryCode: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  location: Coordinates

  """Name of the hotel."""
  name: String
  numberOfHotels: Int
}

"""A connection to a list of items."""
type HotelCityConnection {
  """A list of edges."""
  edges: [HotelCityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type HotelCityEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HotelCity
}

"""Use HotelAmenitiesInput instead"""
input HotelFacilitiesInput {
  """Show only hotels having airport shuttle as a service."""
  airportShuttle: Boolean

  """Show only hotels having facilities for disabled."""
  facilitiesForDisabled: Boolean

  """Show only hotels having family rooms."""
  familyRooms: Boolean

  """Show only hotels having fitness room."""
  fitnessCenter: Boolean

  """Show only hotels having free parking."""
  freeParking: Boolean

  """Show only hotels having indoor swimming pool."""
  indoorPool: Boolean

  """Show only hotels having any parking."""
  parking: Boolean

  """Show only hotels having pets allowed."""
  petsAllowed: Boolean

  """Show only hotels having spa."""
  spa: Boolean

  """Show only hotels having valet parking."""
  valetParking: Boolean

  """Show only hotels having wifi."""
  wifi: Boolean
}

type HotelFacility {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the facility."""
  name: String
}

"""A connection to a list of items."""
type HotelFacilityConnection {
  """A list of edges."""
  edges: [HotelFacilityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type HotelFacilityEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HotelFacility
}

interface HotelInterface {
  address: Address
  amenities: [HotelAmenity]
  coordinates: Coordinates

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  mainPhoto: HotelPhoto
  name: String
  photos: HotelPhotoConnection
  rating: HotelRating
  review: HotelReview
  summary: String
}

"""The urls where the user will be redirected for payment"""
type HotelPaymentUrls {
  bookingComPaymentUrl: String
  stay22PaymentUrl(paymentLink: String!): String
}

type HotelPhoto {
  highResUrl: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  lowResUrl: String
  thumbnailUrl: String
}

"""A connection to a list of items."""
type HotelPhotoConnection {
  """A list of edges."""
  edges: [HotelPhotoEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type HotelPhotoEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HotelPhoto
}

"""Price with extra charges, included and excluded"""
type HotelPrice {
  extraCharges: [ExtraCharges]
  price: Price @deprecated(reason: "Use money type instead")
  total: Money
}

type HotelRating {
  """Name of the stars category."""
  categoryName: String

  """Star rating is always in the interval 1-5 inclusive."""
  stars: Int
}

type HotelReview {
  """The number of reviews of the hotel."""
  count: Int

  """The review score of the hotel in words."""
  description: String

  """The review score of the hotel, in the range 1-10 inclusive."""
  score: Float
}

type HotelRoom implements HotelRoomInterface {
  bedding: [HotelRoomBedding]
  description: HotelRoomDescription

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """
  Note that this number should not be used to display number of person for
  booking a room. This will simply say how many persons will fit in the room
  type. There could be different price for one person living in a double room vs
  two pepole living in a double room
  """
  maxPersons: Int

  """All available photos of the hotel room."""
  photos(after: String, before: String, first: Int, last: Int): HotelRoomPhotoConnection @deprecated(reason: "use roomPhotos")

  """All available photos of the hotel room."""
  roomPhotos: [HotelPhoto]

  """The hotelroom size in square meters"""
  roomSize: Float

  """Type of the hotel room."""
  type: String
}

type HotelRoomAvailability implements HotelRoomAvailabilityInterface {
  """The amount of available rooms for this type"""
  availableRoomsCount: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  incrementalPrice: [Price] @deprecated(reason: "Use incrementalPriceWithExtraCharges instead")

  """Includes room price with extra charges like VAT and city tax"""
  incrementalPriceWithExtraCharges: [HotelPrice]

  """Is breakfast included in the hotelroom"""
  isBreakfastIncluded: Boolean

  """Is the hotelroom refundable"""
  isRefundable: Boolean

  """
  Note that this is different from HotelRoomInterface.maxPersons.
  HotelRoomInterface.maxPersons will show you max number of guests on the room
  type. This maxOccupancy will show you max number of guests for the
  reservation. There could be different price for a double room with one person
  living in it, vs two people living in it.
  """
  maxOccupancy: Int

  """Base price for the room in this configuration."""
  minimalCost: Money

  """Base price for the room in this configuration."""
  minimalPrice: Price @deprecated(reason: "Use money instead")

  """
  Note that this name is different from HotelRoomDescription.title. This name
  contains information also about the block type.
  """
  name: String

  """Original block ID used to open Booking.com page."""
  originalId: String @deprecated(reason: "Use \"id\" field whenever possible.")
  room: HotelRoom
}

interface HotelRoomAvailabilityInterface {
  availableRoomsCount: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  incrementalPrice: [Price]
  incrementalPriceWithExtraCharges: [HotelPrice]
  isBreakfastIncluded: Boolean
  isRefundable: Boolean
  maxOccupancy: Int
  minimalCost: Money
  minimalPrice: Price
  name: String
  room: HotelRoomInterface
}

type HotelRoomBedding {
  amount: Int
  type: String
}

"""A connection to a list of items."""
type HotelRoomConnection {
  """A list of edges."""
  edges: [HotelRoomEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type HotelRoomDescription {
  text: String
  title: String
}

"""An edge in a connection."""
type HotelRoomEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HotelRoom
}

interface HotelRoomInterface {
  bedding: [HotelRoomBedding]
  description: HotelRoomDescription

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  maxPersons: Int
  roomPhotos: [HotelPhoto]
}

"""A connection to a list of items."""
type HotelRoomPhotoConnection {
  """A list of edges."""
  edges: [HotelRoomPhotoEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type HotelRoomPhotoEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HotelPhoto
}

"""Meta data for hotel search"""
type HotelSearchMeta {
  maxPrice: Money
  minPrice: Money
}

type HotelService {
  relevantLocations: [HotelServiceRelevantLocation]
  roomsConfiguration: RoomsConfigurationOutput
}

type HotelServiceRelevantLocation {
  checkin: Date
  checkout: Date
  hotelCity: HotelCity
  location: Location
}

input HotelsFilterInput {
  """Show only hotels having free cancellation."""
  freeCancellation: Boolean

  """Show only hotels having specified hotel amenities"""
  hotelAmenities: HotelAmenitiesInput

  """Deprecated -> use hotelAmenities instead."""
  hotelFacilities: HotelFacilitiesInput

  """
  Show only hotels having minimum total price higher than or equal to this value.
  """
  maximumPrice: String

  """Deprecated -> Use maximumPrice instead"""
  maxPrice: Float

  """Show only hotels having the selected Mealplan"""
  mealplan: Mealplan

  """
  Show only hotels having minimum total price lower than or equal to this value.
  """
  minimumPrice: String

  """Deprecated -> Use minimumPrice instead"""
  minPrice: Float

  """
  Show only hotels having minimum review score higher than or equal to this value. Score must be between 1 and 10.
  """
  minScore: Int

  """List of hotels classes (stars) you want to filter."""
  starsRating: [Int]
}

"""You must provide lat/lng combination OR city ID."""
input HotelsSearchInput {
  """Must not be before today."""
  checkin: Date!

  """Max 365 days in the future, and max 30 days greater than checkin date."""
  checkout: Date!

  """Opaque ID of the city. Use the hotelCities query to find this ID."""
  cityId: String
  language: Language

  """Latitude in float format (example: 45.4654)."""
  latitude: Float

  """Longitude in float format (example: 9.1859)."""
  longitude: Float

  """Search radius in kilometres around specified coordinate"""
  radius: Float = 50
  roomsConfiguration: [RoomsConfiguration!]!
}

type Identity {
  """Internal database ID."""
  databaseId: String @deprecated(reason: "Use id field instead.")

  """Raw input by user, use "login" if you want normalized email."""
  email: String
  emailVerified: Boolean
  firstName: String

  """Concatenation of first and last name with fallback to the login field."""
  fullName: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  lastName: String

  """Use this in API calls. It is email but normalized."""
  login: String
}

type InsurancePrice {
  """Insurance type"""
  insuranceType: InsuranceType
  price: Price
}

type InsuranceService {
  """Returns passengers allowed to buy a travel insurance."""
  passengers: [Passenger]
}

"""Insurance Terms and Conditions document"""
type InsuranceTerms implements DocumentInterface {
  """URL of the document"""
  url: String
}

"""The possible insurance type values"""
enum InsuranceType {
  NONE
  TRAVEL_BASIC
  TRAVEL_PLUS
}

scalar IP

"""Use "Accept-Language" HTTP header to specify locale."""
enum Language {
  ar @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  bg @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ca @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  cs @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  da @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  el @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  engb @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  enus @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  esar @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  et @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fi @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  he @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hu @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  id @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  is @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  it @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ja @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ko @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  lt @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  lv @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ms @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  no @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pt @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ptbr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ptpt @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ro @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sk @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sv @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  th @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  tl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  tr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  uk @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  vi @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zh @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zhcn @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zhtw @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
}

type LeaveForAirportTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""
Leg is the operation of an aircraft from one scheduled departure station to its next scheduled arrival station.
"""
type Leg {
  airline: Airline
  arrival: RouteStop

  """Boarding pass for this leg"""
  boardingPass: BoardingPass
  departure: RouteStop

  """Leg duration in minutes."""
  duration: Int
  flightNumber: Int

  """Information about who covers the transfer"""
  guarantee: CoveredBy

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Determines whether Leg is related to return flight."""
  isReturn: Boolean
  operatingAirline: OperatingAirline

  """Reservation number related to the leg."""
  pnr: String
  recheckRequired: Boolean

  """Leg stopover duration before this leg in minutes."""
  stopoverDuration: Int
  type: VehicleType
  vehicle: Vehicle
}

"""
DEPRECATED - use "Accept-Language" HTTP header to specify locale.Language tag in the format of the RFC 5646.
"""
enum Locale {
  ar_AE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_BH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_JO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_KW @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_OM @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_QA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_SA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  bg_BG @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ca_ES @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  cs_CZ @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  da_DK @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de_AT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de_CH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de_DE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  el_GR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_AU @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_CA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_EE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_GB @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_HK @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_IE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_IN @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_MY @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_NZ @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_PH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_SG @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_US @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_ZA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_AR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_CL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_CO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_EC @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_ES @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_MX @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_PE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fi_FI @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr_BE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr_CA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr_FR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  he_IL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hr_HR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hu_HU @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  id_ID @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  is_IS @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  it_IT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ja_JP @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ko_KR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  lt_LT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nb_NO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nl_NL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nn_NO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  no_NO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pl_PL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pt_BR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pt_PT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ro_RO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru_BY @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru_KZ @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru_RU @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sk_SK @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sr_RS @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sv_SE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  th_TH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  tr_TR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  uk_UA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  vi_VN @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zh_CN @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zh_TW @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
}

type Location {
  airportsCount: Int
  alternativeNames: [String]
  autonomousTerritory: LocationArea
  city: LocationArea
  code: String
  continent: LocationArea
  country: LocationArea
  countryFlagURL: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  isActive: Boolean
  location: Coordinates

  """3-letter IATA code of airport or internal city code."""
  locationId: String
  name: String
  rank: Int
  slug: String
  stationsCount: Int
  subdivision: LocationArea
  tags: [LocationTag]
  timezone: String

  """Airport, city or country."""
  type: String
}

type LocationArea {
  code: String
  locationId: String
  name: String
  slug: String
}

"""A connection to a list of items."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LocationEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Location
}

input LocationInput {
  """Legacy ID used in Locations REST API"""
  locationId: String

  """Location identification used in URL for SEO reasons"""
  slug: String
}

input LocationRadiusInput {
  location: String
  radius: RadiusInput
}

input LocationsOptionsInput {
  """
  DEPRECATED - use "Accept-Language" HTTP header to specify locale.Language tag in the format of the RFC 5646.
  """
  locale: Locale

  """Desired location type the response should only include."""
  locationType: LocationType

  """Desired location types the response should only include."""
  locationTypes: [LocationType!]

  """
  Locations by some providers are hidden by default and have to be explicitly enabled.
  """
  providerIds: [Int!]
}

type LocationTag {
  """If null, tag is valid for the whole year"""
  monthsConstraint: MonthsConstraint
  name: String
}

"""Type of location"""
enum LocationType {
  airport
  autonomous_territory
  bus_station @deprecated(reason: "This type has been removed and there is no replacement for it.")
  city
  country
  special
  station
  subdivision
}

type LoungeService {
  relevantAirports: [LoungeServiceRelevantAirports]
}

type LoungeServiceRelevantAirports {
  location: Location
  whitelabelURL: String
}

enum Mealplan {
  ALL_INCLUSIVE
  BREAKFAST_INCLUDED
  FULL_BOARD
  HALF_BOARD
}

type Money {
  """
  Amount is a string type because it's not recommended to work with floats in
  your application when working with money. This little change suggest that you
  should use something like [decimal.js](https://github.com/MikeMcl/decimal.js/) for example.
  """
  amount: String

  """An ISO-4217 currency code."""
  currencyId: String
}

scalar MonthNumber

type MonthsConstraint {
  """Month number, range 1 to 12"""
  from: MonthNumber

  """Month number, range 1 to 12"""
  to: MonthNumber
}

type NavigateToTerminalTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type NoMoreEditsTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Time of day when phone line provides support in given language."""
type OpeningHours {
  from: Time
  to: Time
}

type OperatingAirline {
  """IATA code of the operating airline."""
  iata: String
  name: String
}

enum OrderBy {
  DISTANCE
  POPULARITY
  PRICE
  RANKING
  REVIEW_SCORE
  STARS
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type ParkingService {
  whitelabelURL: String
}

"""The passengers associated with the booking"""
type Passenger {
  birthday: DateTime
  databaseId: Int
  firstname: String
  fullName: String
  insuranceType: InsuranceType
  lastname: String
  nationality: String

  """Url needed for apple wallet integration"""
  pkpasses: [Pkpass] @deprecated(reason: "Use pkpass under boarding pass instead")
  title: String
  travelDocument: TravelDocument

  """Visa information for the passenger"""
  visaInformation: Visa
}

input PassengerInput {
  """Expiry date of travel document"""
  documentExpiry: Date

  """Number of travel document"""
  documentNumber: String!
  passengerId: Int!
}

input PassengerInsuranceInput {
  """New insurance type for passenger"""
  insuranceType: InsuranceType
  passengerId: Int!
}

type PassengerSegment {
  passengerId: Int
  price: AncillaryPrice
  segmentCode: String
}

input PassengersInput {
  adults: Int!
  infants: Int
}

type PaymentConfirmedTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Url needed for apple wallet integration"""
type Pkpass {
  flightNumber: String
  passenger: Passenger

  """The url to the pkpass file"""
  url: String
}

"""
Deprecated -> use Money instead, because you should not use floats for currencies
"""
type Price {
  amount: Float

  """An ISO-4217 currency code."""
  currency: String
}

"""Service for fetching dynamic packages."""
enum Provider {
  BEDFINDER
}

input RadiusInput {
  """Latitude of the center of the circle."""
  lat: Float!

  """Longitude of the center of the circle."""
  lng: Float!

  """Distance in kilometers."""
  radius: Int!
}

type ResetPasswordResponse {
  success: Boolean
}

input RoomConfigInput {
  count: Int!
  roomId: ID!
}

input RoomsChildrenConfiguration {
  age: Int
}

input RoomsConfiguration {
  adultsCount: Int!
  children: [RoomsChildrenConfiguration]
}

"""Booking.com rooms configuration"""
type RoomsConfigurationOutput {
  adultsCount: Int
  children: [ChildrenType]
}

"""Root Mutation."""
type RootMutation {
  addFAQArticleComment(
    """Comment text"""
    comment: String!

    """Masked ID of FAQ article to receive vote."""
    id: ID

    """Original ID of FAQ article to receive vote (Unmasked)."""
    originalId: Int

    """Value indicating the comment type."""
    type: FAQCommentType!
  ): FAQFeedbackResponse

  """Check whether given e-mail has any associated account or bookings."""
  checkEmail(brand: Brand = "kiwicom", email: String!): CheckEmailResponse

  """Create Kiwi.com user account."""
  createAccount(brand: Brand = "kiwicom", credentials: CreateAccountInput!): CreateAccountResponse

  """
  Get "simple token" which can be used to retrieve booking in "singleBooking" query without authorization.
  """
  createSimpleToken(input: CreateSimpleTokenInput!): CreateSimpleTokenResponse

  """Mutation to add persisted queries -> Not yet production ready"""
  createStoredOperations(persistedOperations: [StoredOperationInput!]!): CreateStoredOperation
  login(email: String!, password: String!): User @deprecated(reason: "Use \"signIn\" mutation instead.")
  refundInsurance(
    brand: String = "kiwicom"

    """The global booking id"""
    id: ID!
    passengers: [PassengerInsuranceInput!]!
    simpleToken: String!
  ): Booking
  resetPassword(brand: String = "kiwicom", email: String!): ResetPasswordResponse

  """Sends time limited link on given e-mail to log in."""
  sendMagicLink(brand: Brand = "kiwicom", email: String!): SendMagicLinkResponse

  """Log into Kiwi.com account with email & password."""
  signIn(brand: Brand = "kiwicom", email: String!, password: String!): SignInResponse
  updatePassenger(
    """The global booking id"""
    id: ID!
    passengers: [PassengerInput!]!
    simpleToken: String
  ): UpdatePassenger
  voteFAQArticle(
    """Masked ID of FAQ article to receive vote."""
    id: ID

    """Original ID of FAQ article to receive vote (Unmasked)."""
    originalId: Int

    """Type of vote for article (up/down)"""
    vote: VoteType
  ): FAQArticle
}

"""Root Query"""
type RootQuery {
  """
  Search for all available hotels in one location. It's necessary to send
  checkin and checkout dates as well as rooms configuration to get availability info.
  """
  allAvailableBookingComHotels(after: String, filter: HotelsFilterInput, first: Int = 50, options: AvailableHotelOptionsInput, search: HotelsSearchInput!): AllHotelAvailabilityHotelConnection

  """
  Search for all available hotels in one location. It's necessary to send
  checkin and checkout dates as well as rooms configuration to get availability info.
  """
  allAvailableHotels(after: String, before: String, filter: HotelsFilterInput, first: Int = 50, last: Int, options: AvailableHotelOptionsInput, search: HotelsSearchInput!): HotelAvailabilityConnection @deprecated(reason: "This query has serious performace issues. That is basically because we are overfeching data\n  from the https://distribution-xml.booking.com/2.0/json/hotels endpoint with way to many extras.\n  Use allAvailableBookingComHotels instead")

  """All available hotels from provider stay22 for the given time"""
  allAvailableStay22Hotels(after: String, before: String, filter: HotelsFilterInput, first: Int = 50, last: Int, search: Stay22HotelsSearchInput!): AllAvailableStay22HotelConnection

  """Get all customer support numbers"""
  allCustomerSupportNumbers: AllCustomerSupportNumbers @deprecated(reason: "Use \"selfService.customerSupportNumbers\" query instead.")

  """Search for the urls of public documents"""
  allDocuments(after: String, before: String, first: Int, last: Int): DocumentInterfaceConnection

  """
  All dynamic packages. Dynamic package is a combination of return flight and
  accommodation in hotel. It saves time and also the price should be better then
  buying flight and acommodation separately.
  """
  allDynamicPackages(
    after: String
    before: String

    """An ISO-4217 currency code."""
    currency: Currency
    first: Int
    last: Int
    simpleSearch: DynamicPackagesSimpleSearchInput!
  ): DynamicPackageConnection

  """Search for Frequently Asked Questions"""
  allFAQs(
    after: String
    before: String
    first: Int
    last: Int

    """Keyword for the search"""
    search: String
  ): FAQArticleConnection

  """Search for scheduled flights."""
  allFlights(after: String, before: String, filters: FlightsFiltersInput, first: Int, last: Int, options: FlightsOptionsInput, search: FlightsSearchInput!): FlightConnection

  """
  Search for airports, cities, countries. You can search by location name,
  radius on the map or rectangle on the map. If you do not specify one of these
  search inputs then the alphabetical dump of all locations is returned.
  """
  allLocations(
    after: String

    """Search location by area."""
    area: AreaInput
    before: String
    first: Int
    last: Int

    """List of legacy location IDs"""
    legacyIds: [String!]
    options: LocationsOptionsInput

    """Search location by radius."""
    radius: RadiusInput

    """Search location by name."""
    search: String

    """Combination of slug and radius. e.g. bratislava-slovakia-169km"""
    slugRadius: String
  ): LocationConnection

  """All locations in certain location. For example all airports in London"""
  allSubLocations(
    after: String
    before: String
    first: Int

    """Location ID"""
    id: String!
    last: Int
    options: LocationsOptionsInput
  ): LocationConnection

  """
  Ancillaries are additional services that can be purchased with a Booking
  """
  ancillaries3rdOffers(after: String, ancillaries: [Ancillaries3rdServices]!, before: String, first: Int, itinerary: [Ancillaries3rdItinerary]!, last: Int, passengers: Int!): Ancillaries3rdOffersConnection

  """
  Search for single available hotel by its ID. It's necessary to send checkin
  and checkout dates as well as rooms configuration to get availability info.
  """
  availableHotel(options: AvailableHotelOptionsInput, search: AvailableHotelSearchInput!): HotelAvailability

  """Get information about ordered ancillaries"""
  bookingAncillaries(attachmentsFor: [AttachmentsFor!], bookingId: Int!): Ancillaries

  """Get the timeline for your booking."""
  bookingTimeline(
    """
    DEPRECATED: use correctly named "simpleToken" arg instead.Simple token that
    lets you fetch a unique booking without authorization.
    """
    authToken: String
    brand: String = "kiwicom"

    """Only Booking id can be used as ID."""
    id: ID!

    """
    Simple token that lets you fetch a unique booking without authorization.
    """
    simpleToken: String
  ): BookingTimeline

  """Currencies used on Kiwi.com frontend"""
  currencies(after: String, before: String, first: Int, last: Int): CurrencyDetailConnection

  """Detail of a currency as used on Kiwi.com frontend"""
  currency(
    """The currency code used on Kiwi.com frontend"""
    code: String!
  ): CurrencyDetail

  """Current user information."""
  currentUser: Identity

  """Search for your flight bookings."""
  customerBookings(
    after: String
    before: String
    brand: String = "kiwicom"
    first: Int
    last: Int

    """
    Allows to filter only future bookings or only past bookings but not both.
    You can skip this argument to fetch all bookings (future and past).
    """
    only: CustomerBookingsOnlyEnum

    """
    Allows to order bookings in ascending or descending order by departure date.
    You can skip this argument to fetch all bookings in ascendering order.
    """
    order: CustomerBookingsOrderEnum
  ): BookingInterfaceConnection

  """
  Get CS number by your locale in "Accept-Language" HTTP header. Null if not CS phone is unavailable.
  """
  customerSupportNumber: CustomerSupportNumber @deprecated(reason: "Use \"selfService.customerSupportNumbers\" query instead.")

  """Retrieve single FAQ article."""
  FAQArticle(
    """
    Masked ID of the FAQ article to retrieve. If both IDs are provided, this one will be used
    """
    id: ID

    """Original ID of the FAQ article to retrieve (Unmasked)"""
    originalId: Int
  ): FAQArticle @deprecated(reason: "Use \"selfService.FAQArticle\" query instead.")

  """Retrieve specific FAQ category and its subcategories & articles."""
  FAQCategory(
    """
    Masked ID of the FAQ category to retrieve.  If both IDs are provided, this one will be used
    """
    id: ID

    """Original ID of the FAQ category to retrieve (Unmasked)"""
    originalId: Int
  ): FAQCategory

  """Retrieve category by section."""
  FAQSection(
    """
    Fetch FAQ category by section according to current customer's booking status.
    """
    section: FAQSection!
  ): FAQCategory

  """Geography info by an IP address"""
  geoIP(ip: IP!): GeoIP

  """Single Holidays location by legacy ID."""
  holidaysLocation(input: HolidaysLocationInput): Location

  """Search for holidays locations by name"""
  holidaysLocations(
    after: String
    before: String
    first: Int
    last: Int

    """Search locations by name."""
    search: String!
  ): LocationConnection

  """Single hotel by ID."""
  hotel(id: ID!, language: Language): Hotel

  """
  All cities where you can find the hotels. This query can be used for
  suggestions of relevant cities (search for example). Cities can be filtered
  by prefix with typo tolerance. Items are sorted by prefix matching and a
  number of hotels (desc). When the prefix is omitted top cities are returned.
  """
  hotelCities(
    after: String
    before: String
    first: Int
    last: Int

    """Search for cities around a given position."""
    position: CoordinatesInput

    """First few letters."""
    prefix: String
  ): HotelCityConnection

  """Url where user will be redirected for payment"""
  hotelPaymentUrls(hotelId: ID, roomConfig: [RoomConfigInput]): HotelPaymentUrls

  """Single location by various inputs."""
  location(input: LocationInput): Location

  """
  Find most relevant booking relative to current time. That is a booking with
  the smallest difference between current time and arrival time of one of its
  Legs. If no future booking is found, then the nearest past booking is returned.
  """
  nearestBooking(
    brand: String = "kiwicom"

    """
    Filter out only the one which has upcoming leg covered by specified guarantee.
    """
    guarantee: CoveredBy
  ): BookingInterface

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Query that wraps all the Self Service queries"""
  selfService(withAuth: BookingAuthInput, withSimpleToken: BookingSimpleTokenInput): SelfServiceQueries

  """Find booking by its id and its simple access token."""
  singleBooking(
    """
    DEPRECATED: use correctly named "simpleToken" arg instead.Simple token that
    lets you fetch a unique booking without authorization.
    """
    authToken: String
    brand: String = "kiwicom"

    """
    Database ID (human readable ID) of the booking. You should use "node" query if you want to use opaque ID.
    """
    id: Int!

    """
    Simple token that lets you fetch a unique booking without authorization.
    """
    simpleToken: String
  ): BookingInterface

  """Single hotel by ID."""
  stay22HotelDetail(checkin: Date!, checkout: Date!, currency: Currency = EUR, guests: Int!, id: ID!): Stay22HotelDetail

  """
  Destinations most searched / clicked on / booked from the starting location.
  """
  topDestinations(
    after: String
    before: String
    first: Int
    last: Int

    """Legacy ID of source location"""
    legacyId: String!
  ): LocationConnection
}

type RouteStop {
  airport: Location

  """City id of the route stop"""
  cityId: String

  """Gate for the route stop"""
  gate: String
  localTime: DateTime

  """Terminal of the route stop"""
  terminal: String
  time: DateTime
}

"""All the queries related to Self Service. The FAQ queries are here"""
type SelfServiceQueries {
  """Retrieve single FAQ article."""
  FAQArticle(findBy: FAQInputQuery!): FAQArticleResponse

  """Retrieve FAQ category according to current customer's booking status."""
  FAQsByBooking: FAQCategoryResponse
}

type SendMagicLinkResponse {
  success: Boolean
}

type Services {
  """Travel insurance - returns "null" if not available."""
  insurance: InsuranceService
}

type SignInResponse {
  success: Boolean
  user: User
}

type SimpleToken {
  directAccessURL(baseURL: String = "https://kiwi.com"): String
  token: String
}

type SimpleTokenError {
  code: SimpleTokenErrorCode
  message: String
}

enum SimpleTokenErrorCode {
  """Booking matching provided values was not found."""
  NOT_FOUND
  UNKNOWN
}

type Stay22Hotel implements HotelInterface {
  address: Address

  """All amenities available in the hotel"""
  amenities: [HotelAmenity]
  coordinates: Coordinates

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """Name of the hotel."""
  name: String

  """All available photos of the hotel."""
  photos(after: String, before: String, first: Int, last: Int): HotelPhotoConnection

  """The star rating of the hotel."""
  rating: HotelRating
  review: HotelReview

  """Main description (summary) of the hotel."""
  summary: String
}

type Stay22HotelDetail implements HotelAvailabilityInterface {
  availableRooms: [Stay22HotelRoomAvailability]
  hotel: Stay22Hotel

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  paymentLink: String

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use total field instead")

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  total: Money
}

type Stay22HotelRoom implements HotelRoomInterface {
  bedding: [HotelRoomBedding]
  description: HotelRoomDescription

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  maxPersons: Int
  roomPhotos: [HotelPhoto]
}

type Stay22HotelRoomAvailability implements HotelRoomAvailabilityInterface {
  """The amount of available rooms for this type"""
  availableRoomsCount: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  incrementalPrice: [Price] @deprecated(reason: "Use incrementalPriceWithExtraCharges instead")

  """Includes room price with extra charges like VAT and city tax"""
  incrementalPriceWithExtraCharges: [HotelPrice]

  """Is breakfast included in the hotelroom"""
  isBreakfastIncluded: Boolean

  """Is the hotelroom refundable"""
  isRefundable: Boolean

  """
  Note that this is different from HotelRoomInterface.maxPersons.
  HotelRoomInterface.maxPersons will show you max number of guests on the room
  type. This maxOccupancy will show you max number of guests for the
  reservation. There could be different price for a double room with one person
  living in it, vs two people living in it.
  """
  maxOccupancy: Int

  """Base price for the room in this configuration."""
  minimalCost: Money

  """Base price for the room in this configuration."""
  minimalPrice: Price @deprecated(reason: "Use money instead")

  """
  Note that this name is different from HotelRoomDescription.title. This name
  contains information also about the block type.
  """
  name: String
  room: Stay22HotelRoom
}

input Stay22HotelsSearchInput {
  checkin: Date!
  checkout: Date!
  currency: Currency = EUR

  """Adults and children"""
  guests: Int!
  latitude: Float!
  longitude: Float!

  """Order results by this input type"""
  orderBy: OrderBy = POPULARITY
}

input StopoversInput {
  """Minimum number of hours of stopover duration."""
  from: Int

  """Maximum number of hours of stopover duration."""
  to: Int
}

type StoredOperation {
  """The md5 has generated by relay compiler"""
  operationId: String

  """The entire query generated by relay compiler"""
  text: String
}

input StoredOperationInput {
  """The md5 has generated by relay compiler"""
  operationId: String!

  """The entire query generated by relay compiler"""
  text: String!
}

type SupportedLanguage {
  """
  Opening hours of phone line during which you get support in a given language.
  """
  availability: CSPhoneAvailabilityInterface

  """Customer support language"""
  language: String

  """Customer support language code"""
  languageCode: String

  """Customer support availability schedule"""
  phoneLanguageAvailability: CSPhoneAvailabilityWorkingDays @deprecated(reason: "Use \"availability\" field instead.")
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format
outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Time

interface TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type TimeToCheckinTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type TransportationService {
  relevantLocations: [TransportationServiceRelevantLocations]
}

type TransportationServiceRelevantLocations {
  date: Date
  location: Location
  whitelabelURL: String
}

type TransportFromAirportTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Travel document info"""
type TravelDocument {
  expiration: DateTime
  idNumber: String
}

"""Single travel from origin to destination, with possible stopovers."""
type Trip {
  arrival: RouteStop
  departure: RouteStop

  """Trip duration in minutes."""
  duration: Int
  legs: [Leg]
}

type UpdatePassenger {
  success: Boolean
}

type User {
  """
  User settings & credit balances related to making bookings on Kiwi.com.
  """
  bookingIdentity: BookingIdentity
  identity: Identity
  isLoggedIn: Boolean
  token: String
}

type Vehicle {
  manufacturer: String
  model: String
}

enum VehicleType {
  AIRCRAFT
  BUS
  TRAIN
}

"""Visa information for passenger"""
type Visa {
  """Countries where visa is not required"""
  okIn: [Location]

  """Countries where visa is required"""
  requiredIn: [Location]

  """Countries where visa might be required"""
  warningIn: [Location]
}

enum VoteType {
  down
  up
}

type WhitelabeledServices {
  carRental: CarRentalService
  hotel: HotelService
  lounge: LoungeService
  parking: ParkingService
  transportation: TransportationService
}

